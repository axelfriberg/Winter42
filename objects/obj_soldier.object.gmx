<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_soldier</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>scr_initialize_soldier();
Health=100;
Morale=100;
Name="Bob";
CanEvolve=true;
AmmoSkill = 1;
FightSkill = 5;
CookSkill = 1;
SocialSkill = 1;
ScavengingSkill = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Eating alarm

Completed = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string> /// Deletes dialog box after short time
 
 if(object_exists(obj_textbox))
    {
        var textbox  = instance_place(x-200, y-100, obj_textbox);
        if textbox != noone
        {   
            with(textbox) instance_destroy();
        }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Completed=true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Completed=true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Alarm for cooking

Completed = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
if isOut{
sprite_index = spr_empty;
} else if isSelected{
sprite_index = spr_soldierSelected
} else {
sprite_index = spr_soldier
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Moving soldier and doing stuff

MoveSpeed=OriginalMoveSpeed*global.multiplier;

if(isTarget){
    MoveX=x;
    MoveY=y;
}

if(global.movement)
    scr_randomMovement();
else
    scr_smallMovement();


if Move&amp;&amp;!isOut{
  if(Cooking)    
    audio_stop_sound(snd_cooking);   
  if(makingFire)   
    audio_stop_sound(snd_fire); 
  if(CraftingAmmo)
    audio_stop_sound(snd_blacksmith);
  scr_move();
}

if Busy &amp;&amp; Completed{
    Busy = false;
    Completed = false;
        //Raw Food ==&gt; Cooked Food
        if(Cooking)
        {
            if(CanEvolve)
                CookSkill+=0.20;
            Cooking = false;
            global.RawFood -= 1;
            global.CookedFood += floor(CookSkill);
            scr_dialogue("Mmmm it will be delicious", x-260, y-130);
            audio_stop_sound(snd_cooking);   
        } // Went scavaging, found raw food and scraps
        if(isOut)
        {
            if(CanEvolve)
                ScavengingSkill += 0.20;
            isOut = false;
            GoOut= false;
            Health -= global.outDamage;
            if(Health &lt;= 0){
            }
            else{
                global.RawFood += global.outFood;
                global.Scraps += global.outScrap;
                with(obj_controller){
                        messageCheck = true;
                        returnMessage = true;
                        attackBuffer = alarm[2];
                        stormBuffer = alarm[0];
                        alarm[2] = -1;
                        alarm[0] = -1;
                        scr_pause();
                        screenHide = instance_create(view_wview[0]/2, view_hview[0]/2, obj_darkenScreen);
                        startingInfo = instance_create(view_wview[0]/2,  view_hview[0]/2, obj_menuBg);
                        continueButton = instance_create(view_xview[0]+view_wview[0]/2, view_yview[0]+view_hview[0]/2+117, obj_continueButton);
                        
                    }
            }
            isOut = false;
            /*global.RawFood += 2;
            global.Scraps += 3;
            scr_dialogue("Found raw food and scraps", x-260, y-130);*/
            audio_play_sound(snd_door,0,0);
        }
        if(makingFire){
            makingFire = false;
            global.Temperature += 1;
            global.Scraps -= 1;
            scr_dialogue("Warm and cozy", x-260, y-130);
            audio_stop_sound(snd_fire);         
        }
        if(CraftingAmmo){
            if(CanEvolve)
                AmmoSkill += 0.20;
            CraftingAmmo = false;
            global.Scraps -=1;
            global.Ammunition += 3*floor(AmmoSkill);
            scr_dialogue("Feeling safer now!", x-260, y-130);
            audio_stop_sound(snd_blacksmith);
        }
        if(CraftDefenses){
            if(CanEvolve)
                AmmoSkill += 0.20;
            CraftDefenses = false;
            scr_dialogue("Much defense, such safety! Wow!", x-260, y-130);
            audio_stop_sound(snd_blacksmith);
        } 
        if(Eating){
            Eating = false;
            if(global.CookedFood &gt; 0){
                global.CookedFood -= 1;
            } 
             else{ 
                Health=Health-20;
            }
            Move=true;
            MoveX=OldX;
            MoveY=OldY;
            tableSeat[table]=false;
            
        }
        if(Sleep){
            Sleep = false;
            Move=true;
            MoveX=OldX;
            MoveY=OldY;
            bedTaken[bed]=false; 
        }
        if(CanEvolve){
            if(AmmoSkill&gt;=3){
                scr_evolve(1);
            }
            if(ScavengingSkill&gt;=3){
                scr_evolve(2);
            }
            if(CookSkill&gt;=3){
                scr_evolve(3);
            }
        }
}

if global.Selected == id{
    isSelected = true;
}
else{
    isSelected = false
}
/// Soldiers eat at 12 and 19
scr_eat(12);
scr_eat(19);
/// Low temperature every hour causes soldiers to lose health
scr_cold(10,0);

if(global.Soldiers&lt;5){
    Morale=global.Soldiers*20;
}
/// they go to bed at 21:45
scr_sleep(21);

if(Health&lt;=0){
    if(isSelected)
        global.Selected=-1;
    global.Soldiers--;
    instance_destroy();
    audio_play_sound(snd_death,0,0);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_wall">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>MoveSpeed = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//global.Selected = id;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if isSelected{
    draw_sprite(spr_soldierInfo, image_index, 100, 595);
    draw_set_alpha( 1 );
    draw_set_color( c_white );
    draw_set_font(fnt_info);
    draw_set_valign(fa_top);
    draw_set_halign(fa_left);
    
    //Character base info          
    draw_text(80, 484, 
    "Name: " + string(Name) + "#Ability: None#Health: " + string(Health) + "%#Morale: " + string(Morale) + "%");
    
    //Character description
    draw_text(20, 560, 
    "Just a random soldier#named " + string(Name) + "...#What kind of name is that???");
    
    //Character description
    draw_text(20, 642, 
    "Crafting:     lvl " + string(AmmoSkill) + "#Fighting:     lvl " + string(FightSkill) + "#Cooking:     lvl "  + string(CookSkill)+ "#Scavenging:  lvl "  + string(ScavengingSkill));
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(!isOut){
    draw_self();
    draw_healthbar(x-16,y-50, x+16, y-40, max(0,(Health / 100) * 100), c_black, c_red, c_lime, 0, true, true)
    if(alarm[0]&gt;0&amp;&amp;Busy)
        draw_healthbar(x+30,y-20, x+40, y-70, max(0,100-(alarm[0] / 100) * 100), c_black, c_red, c_lime, 2, true, true)
    if(alarm[2]&gt;0&amp;&amp;Busy)
        draw_healthbar(x-30,y-20, x-40, y-70, max(0,100-(alarm[2] / 100) * 100), c_black, c_red, c_lime, 2, true, true)
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
